
khsie3_amalu001_lab1_part9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b9  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c8  00000000  00000000  00000355  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000144  00000000  00000000  0000041d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000166  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a0  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	18 c0       	rjmp	.+48     	; 0xcc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return(b?x|(0x01<<k):x&~(0x01<<k));
}

int main(void)
{
	DDRB = 0xFE; PORTB = 0x00; // output
  9e:	8e ef       	ldi	r24, 0xFE	; 254
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; PORTD = 0x00; //input
  a4:	1a b8       	out	0x0a, r1	; 10
  a6:	1b b8       	out	0x0b, r1	; 11
	
	
    while(1)
    {
		unsigned char tempB = PORTB;
  a8:	85 b1       	in	r24, 0x05	; 5
        if(PIND >= 35)
  aa:	99 b1       	in	r25, 0x09	; 9
  ac:	93 32       	cpi	r25, 0x23	; 35
  ae:	10 f0       	brcs	.+4      	; 0xb4 <main+0x16>

#include <avr/io.h>

//x is the word to be modified, k-th bit to modify, b is the new bit
unsigned char SetBit(unsigned char x, unsigned char k, unsigned b){
	return(b?x|(0x01<<k):x&~(0x01<<k));
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x18>
  b4:	8d 7f       	andi	r24, 0xFD	; 253
		}
		else
		{
			tempB = SetBit(tempB,1,0);
		}
		if((PIND > 2) && (PIND < 35))
  b6:	99 b1       	in	r25, 0x09	; 9
  b8:	93 30       	cpi	r25, 0x03	; 3
  ba:	28 f0       	brcs	.+10     	; 0xc6 <main+0x28>
  bc:	99 b1       	in	r25, 0x09	; 9
  be:	93 32       	cpi	r25, 0x23	; 35
  c0:	10 f4       	brcc	.+4      	; 0xc6 <main+0x28>

#include <avr/io.h>

//x is the word to be modified, k-th bit to modify, b is the new bit
unsigned char SetBit(unsigned char x, unsigned char k, unsigned b){
	return(b?x|(0x01<<k):x&~(0x01<<k));
  c2:	84 60       	ori	r24, 0x04	; 4
		{
			tempB = SetBit(tempB,1,0);
		}
		if((PIND > 2) && (PIND < 35))
		{
			tempB = SetBit(tempB, 2, 1);
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <main+0x2a>

#include <avr/io.h>

//x is the word to be modified, k-th bit to modify, b is the new bit
unsigned char SetBit(unsigned char x, unsigned char k, unsigned b){
	return(b?x|(0x01<<k):x&~(0x01<<k));
  c6:	8b 7f       	andi	r24, 0xFB	; 251
		}
		else//(PIND <= 2)
		{
			tempB = SetBit(tempB,2,0);
		}
		PORTB = tempB;
  c8:	85 b9       	out	0x05, r24	; 5
    }
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0xa>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
