
khsie003_amalu001_lab1_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013c  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000de  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015a  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016b  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c2  00000000  00000000  000006d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00000799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2b c0       	rjmp	.+86     	; 0xf2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return((x&(0x01<<k))!=0);
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //input
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF;
  a4:	14 b8       	out	0x04, r1	; 4
  a6:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8
    unsigned char ones = 0x00;
	while(1)
    {
		ones = 0x00;
		
        for(int i = 0; i < 8; ++i)
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	a0 e0       	ldi	r26, 0x00	; 0
	DDRB = 0x00; PORTB = 0xFF;
	DDRC = 0xFF; PORTC = 0x00;
    unsigned char ones = 0x00;
	while(1)
    {
		ones = 0x00;
  b0:	f0 e0       	ldi	r31, 0x00	; 0
		
        for(int i = 0; i < 8; ++i)
  b2:	8b 2f       	mov	r24, r27
  b4:	9a 2f       	mov	r25, r26
	DDRB = 0x00; PORTB = 0xFF;
	DDRC = 0xFF; PORTC = 0x00;
    unsigned char ones = 0x00;
	while(1)
    {
		ones = 0x00;
  b6:	ef 2f       	mov	r30, r31
		
        for(int i = 0; i < 8; ++i)
		{
			ones += GetBit(PORTA, i);
  b8:	42 b1       	in	r20, 0x02	; 2
#include <avr/io.h>


//x is the word to access, k-th bit to get
unsigned char GetBit(unsigned char x, unsigned char k){
	return((x&(0x01<<k))!=0);
  ba:	9c 01       	movw	r18, r24
  bc:	33 27       	eor	r19, r19
		ones = 0x00;
		
        for(int i = 0; i < 8; ++i)
		{
			ones += GetBit(PORTA, i);
			ones += GetBit(PORTB, i);
  be:	65 b1       	in	r22, 0x05	; 5
#include <avr/io.h>


//x is the word to access, k-th bit to get
unsigned char GetBit(unsigned char x, unsigned char k){
	return((x&(0x01<<k))!=0);
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x2c>
  c6:	75 95       	asr	r23
  c8:	67 95       	ror	r22
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x28>
  ce:	61 70       	andi	r22, 0x01	; 1
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	ea 01       	movw	r28, r20
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x3c>
  d6:	d5 95       	asr	r29
  d8:	c7 95       	ror	r28
  da:	2a 95       	dec	r18
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x38>
  de:	9e 01       	movw	r18, r28
  e0:	21 70       	andi	r18, 0x01	; 1
    {
		ones = 0x00;
		
        for(int i = 0; i < 8; ++i)
		{
			ones += GetBit(PORTA, i);
  e2:	26 0f       	add	r18, r22
			ones += GetBit(PORTB, i);
  e4:	e2 0f       	add	r30, r18
    unsigned char ones = 0x00;
	while(1)
    {
		ones = 0x00;
		
        for(int i = 0; i < 8; ++i)
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	91 05       	cpc	r25, r1
  ec:	29 f7       	brne	.-54     	; 0xb8 <main+0x1a>
		{
			ones += GetBit(PORTA, i);
			ones += GetBit(PORTB, i);
			
		}
		PORTC = ones;
  ee:	e8 b9       	out	0x08, r30	; 8
    }
  f0:	e0 cf       	rjmp	.-64     	; 0xb2 <main+0x14>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
